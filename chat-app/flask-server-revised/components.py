# used in the reset_values.py

import json

data_path = './json_files'


def save_as_json(data, name):
    with open(f'{data_path}/{name}.json', 'w') as fp:
        json.dump(data, fp)


intent_mapping = {'tabular_num_num': {'intents': ['list_features',
                                                  'most_important_feature',
                                                  'what_if_subs',
                                                  'why_this_regression',
                                                  'feature_importance_global',
                                                  'feature_effect_regression',
                                                  'why_not_regression',
                                                  ]},
                  'tabular_num_cat': {'intents': ['list_features',
                                                  'most_important_feature',
                                                  'why_not',
                                                  'why_this',
                                                  'how_arrive_to',
                                                  'why_not_this_record',
                                                  'expectation_not_met',
                                                  'feature_importance_global',
                                                  'overall_contribution_to_label',
                                                  'single_contribution_to_label',
                                                  'feature_effect', ]},
                  'tabular_mixed_num': {'intents': ['list_features',
                                                    'most_important_feature',
                                                    'why_this_regression',
                                                    'how_arrive_to',
                                                    'why_not_this_record',
                                                    'feature_importance_global',
                                                    'feature_effect_regression',
                                                    'why_not_regression',
                                                    ]},
                  'tabular_mixed_cat': {'intents': ['list_features',
                                                    'most_important_feature',
                                                    'why_not',
                                                    'why_this',
                                                    'how_arrive_to',
                                                    'why_not_this_record',
                                                    'expectation_not_met',
                                                    'feature_importance_global',
                                                    'overall_contribution_to_label',
                                                    'single_contribution_to_label',
                                                    'feature_effect', ]},
                  'tabular_cat_num': {'intents': ['list_features',
                                                  'most_important_feature',
                                                  'why_this_regression',
                                                  'how_arrive_to',
                                                  'why_not_this_record',
                                                  'feature_importance_global',
                                                  'feature_effect_regression',
                                                  'why_not_regression',
                                                  ]},
                  'tabular_cat_cat': {'intents': ['list_features',
                                                  'most_important_feature',
                                                  'why_not',
                                                  'why_this',
                                                  'how_arrive_to',
                                                  'why_not_this_record',
                                                  'expectation_not_met',
                                                  'feature_importance_global',
                                                  'overall_contribution_to_label',
                                                  'single_contribution_to_label',
                                                  'feature_effect', ]},
                  'ts_num_num': {'intents': []},
                  'ts_num_cat': {'intents': []},
                  'ts_mixed_num': {'intents': []},
                  'ts_mixed_cat': {'intents': []},
                  'textual_cat': {'intents': ['list_features',
                                              'most_important_feature',
                                              'why_not',
                                              'why_this',
                                              'how_arrive_to',
                                              'why_not_this_record',
                                              'what_if_add',
                                              'what_if_del',
                                              'expectation_not_met',
                                              'feature_importance_global',
                                              'overall_contribution_to_label',
                                              'single_contribution_to_label',
                                              'feature_effect', ]
                                  },
                  'textual_num': {'intents': []},
                  'image_cat': {'intents': []}}

data_type_categories = {'tabular': ['tabular_num_cat', 'tabular_mixed_num',
                                    'tabular_mixed_cat', 'tabular_cat_num',
                                    'tabular_cat_cat', 'tabular_num_num', ]}

dataset_mapping = {'20_news_group':
                   {'data_type': 'textual_cat',
                    'labels': ['atheism', 'christian'],
                    'lower': 0,
                    'upper': 10,
                    'num_records': 150,
                    'name': '20_News_Group',
                    # 25 words randomly sampled from 80 radom training records using following
                    # [x[0].lower() for x in [random.sample(k, 1) for k in [x.split() for x in n_80]] if len(x[0])>4]
                    'feature_names': ['father',
                                      'christians',
                                      'accepted',
                                      'again',
                                      'while',
                                      'health',
                                      'amongst',
                                      'induction',
                                      'above',
                                      'proscribed',
                                      'absolutely',
                                      'thread',
                                      'giving',
                                      'race',
                                      'humans',
                                      'stopped',
                                      'others',
                                      'mozumder',
                                      'brought',
                                      'sides',
                                      'catholic',
                                      'their',
                                      'catholics',
                                      'people',
                                      'welcome']},
                   'iris': {
                       'data_type': 'tabular_num_cat',
                       'labels': ['setosa', 'versicolor', 'virginica'],
                       'label_index': [0, 1, 2],
                       'feature_names': ['sepal length (cm)',
                                         'sepal width (cm)',
                                         'petal length (cm)',
                                         'petal width (cm)'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 30,
                       'name': 'iris'},
                   'wine': {
                       'data_type': 'tabular_num_cat',
                       'labels': ['class_0', 'class_1', 'class_2'],
                       'label_index': [],
                       'feature_names': ['alcohol', 'malic_acid', 'ash', 'alcalinity_of_ash', 'magnesium',
                                         'total_phenols', 'flavanoids', 'nonflavanoid_phenols',
                                         'proanthocyanins', 'color_intensity', 'hue',
                                         'od280/od315_of_diluted_wines', 'proline'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 36,
                       'name': 'wine'
                   },
                   'abalone': {
                       'data_type': 'tabular_num_cat',
                       'labels': ['0', '1', '2'],
                       'label_index': [],
                       'feature_names': ['Length', 'Diameter', 'Height', 'Whole_weight', 'Shucked_weight',
                                         'Viscera_weight', 'Shell_weight', 'Age'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 836,
                       'name': 'abalone'
                   },
                   'breast_cancer': {
                       'data_type': 'tabular_num_cat',
                       'labels': ['0', '1'],
                       'label_index': [],
                       'feature_names': ['mean radius', 'mean texture', 'mean perimeter', 'mean area',
                                         'mean smoothness', 'mean compactness', 'mean concavity',
                                         'mean concave points', 'mean symmetry', 'mean fractal dimension',
                                         'radius error', 'texture error', 'perimeter error', 'area error',
                                         'smoothness error', 'compactness error', 'concavity error',
                                         'concave points error', 'symmetry error',
                                         'fractal dimension error', 'worst radius', 'worst texture',
                                         'worst perimeter', 'worst area', 'worst smoothness',
                                         'worst compactness', 'worst concavity', 'worst concave points',
                                         'worst symmetry', 'worst fractal dimension'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 596,
                       'name': 'breast cancer'
                   },
                   'diabetes': {
                       'data_type': 'tabular_num_num',
                       'labels': None,
                       'label_index': [],
                       'feature_names': ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 89,
                       'name': 'diabetes'
                   },
                   'bike_sharing': {
                       'data_type': 'tabular_mixed_num',
                       'labels': None,
                       'label_index': [],
                       'feature_names': ['workingday', 'temp', 'humidity', 'windspeed', 'casual', 'registered',
                                         'count', 'time', 'month', 'season_2', 'season_3', 'season_4',
                                         'weather_2', 'weather_3', 'weather_4'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 3476,
                       'name': 'bike sharing'
                   }, }

model_mapping = {'random_forest': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                                   'name': 'Random_Forest',
                                   'tree_based': True,
                                   'regression': False, },
                 'decision_tree': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                                   'name': 'Decision_Tree',
                                   'tree_based': True,
                                   'regression': False, },
                 'xgboost': {'task': ['tabular_num_cat',
                                      'textual_cat'],
                             'name': 'XGBoost',
                             'tree_based': True,
                             'regression': False, },
                 'svm': {'task': ['tabular_num_cat',
                                  'textual_cat'],
                         'name': 'SVM',
                         'tree_based': False,
                         'regression': False, },
                 'naive_bayes': {'task': ['tabular_num_cat',
                                          'textual_cat'],
                                 'name': 'Naive_Bayes',
                                 'tree_based': False,
                                 'regression': False, },
                 'knn': {'task': ['tabular_num_cat',
                                  'textual_cat'],
                         'name': 'KNN',
                         'tree_based': False,
                         'regression': False, },
                 'ols': {'task': ['tabular_mixed_num',
                                  'tabular_num_num', ],
                         'name': 'OLS',
                         'tree_based': False,
                         'regression': True, },

                 'random_forest_regressor': {'task': ['tabular_mixed_num',
                                                      'tabular_num_num', ],
                                             'name': 'Random_Forest_Regressor',
                                             'tree_based': False,
                                             'regression': True, },
                 }

profile_mapping = {'end_user': {'name': 'End user',
                                'presentation': ['text']},
                   'developer': {'name': 'Developer',
                                 'presentation': ['text', 'plot']},
                   'manager': {'name': 'Manager',
                               'presentation': ['text', 'plot']}}

exp_intents = {'list_features': {'entities': {'must': ['record'],
                                              'alts': {}}, 'explanation': 'list_of_features'},
               'what_if_subs': {'entities': {'must': ['record', 'feature', 'new_val'],
                                             'alts': {}}, 'explanations': 'new_output_of_model'},
               'why_not': {'entities': {'must': ['record', 'des_label'],
                                        'alts': {}}, 'explanations': 'path_to_other_label'},
               'why_not_regression': {'entities': {'must': ['record', 'level'],
                                                   'alts': {}}, 'explanations': 'path_to_other_label'},
               'why_this': {'entities': {'must': ['record'],
                                         'alts': {}}, 'explanations': 'path_to_label'},
               'why_this_regression': {'entities': {'must': ['record'],
                                         'alts': {}}, 'explanations': 'path_to_label'},
               'most_important_feature': {'entities': {'must': ['record'],
                                                       'alts': {}}, 'explanations': 'list_of_features'},
               'what_if_add': {'entities': {'must': ['record', 'token'],
                                            'alts': {}}, 'explanations': 'new_label'},
               'what_if_del': {'entities': {'must': ['record', 'token'],
                                            'alts': {}}, 'explanations': 'new_label'},
               'feature_importance_global': {'entities': {'must': [], 'alts': {}}},
               'overall_contribution_to_label': {'entities': {'must': ['label'], 'alts': {}}},
               'single_contribution_to_label': {'entities': {'must': ['record', 'label'], 'alts': {}}},
               'feature_effect': {'entities': {'must': ['feature', 'label'], 'alts': {}}},
               'feature_effect_regression': {'entities': {'must': ['feature'], 'alts': {}}},



               'greet': {'entities': {'must': [], 'alts': {}}},
               'goodbye': {'entities': {'must': [], 'alts': {}}},
               'affirm': {'entities': {'must': [], 'alts': {}}},
               'deny': {'entities': {'must': [], 'alts': {}}},
               'nlu_fallback': {'entities': {'must': [], 'alts': {}}},
               'chitchat_general': {'entities': {'must': [], 'alts': {}}},
               'help': {'entities': {'must': [], 'alts': {}}},
               'human_handoff': {'entities': {'must': [], 'alts': {}}},
               }
exp_mapping = {'lime': {'type': ['local'],
                        'data_type': ['tabular_num_cat', 'tabular_mixed_cat', 
                        'textual_cat', 'tabular_num_num', 'tabular_mixed_num'],
                        'presentation': ['text', 'plot'],
                        'supported_intents': ['why_this', 'list_features', 'most_important_feature', 'why_this_regression',],
                        'example_questions': []},
                  'fake': {'type': ['local'],
                           'data_type': ['textual_cat', 'tabular_num_num'],
                           'presentation': ['text'],
                           'supported_intents': ['what_if_add', 'what_if_del', 'what_if_subs'],
                           'example_questions': []},
               'foiltree': {'type': ['local'],
                            'data_type': ['tabular_num_cat', 'tabular_mixed_num',
                                          'tabular_mixed_cat', 'tabular_cat_num',
                                          'tabular_cat_cat', 'tabular_num_num'],
                            'presentation': ['text'],
                            'supported_intents': ['why_not', 'expectation_not_met', 'why_not_regression', ],
                            'example_questions': []},
               'shap': {'type': ['local', 'global'],
                        'data_type': ['tabular_num_cat', 'tabular_mixed_num',
                                      'tabular_mixed_cat', 'tabular_cat_num',
                                      'tabular_cat_cat', 'tabular_num_num',
                                      'textual_cat'],
                        'presentation': ['plot'],
                        'supported_intents': ['feature_importance_global',
                                              'overall_contribution_to_label',
                                              'single_contribution_to_label',
                                              'feature_effect',
                                              'feature_effect_regression',
                                              'why_this',
                                              'why_this_regression',




                                              ],
                        'example_questions': []}
               }

# general_intents = ['greet',
#                    'affirm',
#                    'goodbye',
#                    'deny',
#                    'nlu_fallback',
#                    'chitchat_general',
#                    'help',
#                    'human_handoff',
#                    'thankyou']

generic_responses = {'greet': ['Hi there!', 'Hello!', 'Hi!', 'Hey there!'],
                     'goodbye': ['Goodbye!', 'See you later!', 'Bye! see you later!'],
                     'nlu_fallback': ['Sorry I didn\'t get what you said...could you rephrase it?',
                                      'Hmmm...can you repeat what you said ?',
                                      'Don\'t hate me but I didn\'t understand what you said :(',
                                      'Sorry but it seems I have no answer to that...can you rephrase it ?',
                                      'Sorry but I can\'t understand what you say'],
                     'chitchat_general': ['I have no time for chitchat..human :D',
                                          'We\'ll talk about it later but first ask me something about the blackbox!',
                                          'I\'m the king (or queen ?) of the chitchat but first let\'s see how can I help you with the results!'],
                     'help': ["""I\'m a chat-bot you can ask anything about the outcome of the blackbox model. Here are some examples:\n
                        - Why the model classified instance number N as class X ?
                        - What are the most important features the model used for classifying the instance N ?
                        - What is the most important feature for classifying the instance N ? """],
                     'human_handoff': ['Sorry but my human is not available right now :(',
                                       'Error 404: No human was found !',
                                       'Who needs a human when such a smart bot like me exist ;)Hey '],
                     'thankyou': ['You\'re welcome!',
                                  'My pleasure!',
                                  'Happy to help! :)']
                     }

entity_mapping = {'INS': 'record',
                  'LAB': 'label',
                  'FEAT': 'feature',
                  'TOKEN': 'token',
                  'ACT_LAB': 'act_label',
                  'DES_LAB': 'des_label',
                  'NEW_VAL': 'new_val',
                  'LEVEL': 'level', }


save_as_json(dataset_mapping, 'datasets')
save_as_json(model_mapping, 'models')
save_as_json(intent_mapping, 'intents')
save_as_json(profile_mapping, 'profiles')
save_as_json(exp_intents, 'exp_intents')
save_as_json(entity_mapping, 'entities')
save_as_json(generic_responses, 'generic_responses')
