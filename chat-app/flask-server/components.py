# used in the reset_values.py

import json

data_path = '../../data'
def save_as_json(data, name):
    with open(f'{data_path}/{name}.json', 'w') as fp:
        json.dump(data, fp)

intent_mapping = {'tabular_num_num': {'intents': ['list_features',
                                                  'list_features_pos',
                                                  'list_features_neg',
                                                  'most_important_feature',
                                                  'what_if_subs',
                                                  'what_if_modify',
                                                  'why_not',
                                                  'why_this',
                                                  'how_arrive_to',
                                                  'why_not_this_record']},
                  'tabular_num_cat': {'intents': ['list_features',
                                                  'list_features_pos',
                                                  'list_features_neg',
                                                  'most_important_feature',
                                                  'what_if_subs',
                                                  'what_if_modify',
                                                  'why_not',
                                                  'why_this',
                                                  'how_arrive_to',
                                                  'why_not_this_record']},
                  'tabular_mixed_num': {'intents': []},
                  'tabular_mixed_cat': {'intents': []},
                  'tabular_cat_num': {'intents': []},
                  'tabular_cat_cat': {'intents': []},
                  'ts_num_num': {'intents': []},
                  'ts_num_cat': {'intents': []},
                  'ts_mixed_num': {'intents': []},
                  'ts_mixed_cat': {'intents': []},
                  'textual_cat': {'intents': ['list_features',
                                              'list_features_pos',
                                              'list_features_neg',
                                              'most_important_feature',
                                              'what_if_add_remove',
                                              'why_not',
                                              'why_this',
                                              'how_arrive_to',
                                              'why_not_this_record',
                                              'what_if_add',
                                              'what_if_del']},
                  'textual_num': {'intents': []},
                  'image_cat': {'intents': []}}


dataset_mapping = {'20_news_group':
                   {'data_type': 'textual_cat',
                    'labels': ['atheism', 'christian'],
                    'lower': 0,
                    'upper': 10,
                    'num_records': 150,
                    'name': '20_News_Group',
                    # 25 words randomly sampled from 80 radom training records using following
                    # [x[0].lower() for x in [random.sample(k, 1) for k in [x.split() for x in n_80]] if len(x[0])>4]
                    'feature_names': ['father',
                                        'christians',
                                        'accepted',
                                        'again',
                                        'while',
                                        'health',
                                        'amongst',
                                        'induction',
                                        'above',
                                        'proscribed',
                                        'absolutely',
                                        'thread',
                                        'giving',
                                        'race',
                                        'humans',
                                        'stopped',
                                        'others',
                                        'mozumder',
                                        'brought',
                                        'sides',
                                        'catholic',
                                        'their',
                                        'catholics',
                                        'people',
                                        'welcome']},
                   'iris': {
                       'data_type': 'tabular_num_cat',
                       'labels': ['setosa', 'versicolor', 'virginica'],
                       'feature_names': ['sepal_length', 'sepal_width',
                                         'petal_length', 'petal_width'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 150,
                       'name': 'iris'},
                   'wine': {
                       'data_type': 'tabular_num_cat',
                       'labels': ['1', '2', '3'],
                       'feature_names': ['Malic acid',
                                        'Ash',
                                        'Alcalinity of ash  ',
                                        'Magnesium',
                                        'Total phenols',
                                        'Flavanoids',
                                        'Nonflavanoid phenols',
                                        'Proanthocyanins',
                                        'Color intensity',
                                        'Hue',
                                        'OD280/OD315 of diluted wines',
                                        'Proline'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 178,
                       'name': 'wine'
                   },
                   'abalone': {
                       'data_type': 'tabular_num_num',
                       'labels': ['M', 'F', 'I'],
                       'feature_names': ['Sex',
                                        'Length',
                                        'Diameter',
                                        'Height',
                                        'Whole weight',
                                        'Shucked weight',
                                        'Viscera weight',
                                        'Shell weight',],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 4177,
                       'name': 'abalone'
                   }, 
                   'heart_disease': {
                       'data_type': 'tabular_num_num',
                       'labels': [],
                       'feature_names': ['age',
                                        'sex',
                                        'cp',
                                        'trestbps',
                                        'chol',
                                        'fbs',
                                        'restecg',
                                        'thalach',
                                        'exang',
                                        'oldpeak',
                                        'slope',
                                        'ca',
                                        'thal'],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 303,
                       'name': 'Heart_Disease'
                   },
                    'otto': {
                       'data_type': 'tabular_num_cat',
                       'labels': [1,2,3,4,5,6,7,8],
                       'feature_names': [],
                       'lower': 0,
                       'upper': 10,
                       'num_records': 200000,
                       'name': 'Otto'
                   }}

model_mapping = {'random_forest': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                                   'name': 'Random_Forest'},
                'decision_tree': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                'name': 'Decision_Tree'},
                'xgboost': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                'name': 'XGBoost'},
                'svm': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                'name': 'SVM'},
                'naive_bayes': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                'name': 'Naive_Bayes'},
                'knn': {'task': ['tabular_num_cat',
                                            'textual_cat'],
                'name': 'KNN'},
                                   }
profile_mapping = {'enduser': {'name': 'End user',
                               'presentation': ''},
                   'developer': {'name': 'Developer',
                                 'presentation': ''},
                   'Manager': {'name': 'Manager',
                               'presentation': ''}}

exp_intents = {'list_features': {'entities': {'must': ['record'],
                                              'alts': {}}, 'explanation': 'list_of_features'},
               'what_if_subs': {'entities': {'must': ['record', 'feature', 'new_val'],
                                             'alts': {}}, 'explanations': 'new_output_of_model'},
               'why_not': {'entities': {'must': ['record', 'des_label'],
                                        'alts': {}}, 'explanations': 'path_to_other_label'},
               'why_this': {'entities': {'must': ['record', 'label'],
                                         'alts': {'label': ['des_label']}}, 'explanations': 'path_to_label'},
               'most_important_feature': {'entities': {'must': ['record'],
                                                       'alts': {}}, 'explanations': 'list_of_features'},
               'what_if_add': {'entities': {'must': ['record', 'token'],
                                                       'alts': {}}, 'explanations': 'new_label'},
               'what_if_del': {'entities': {'must': ['record', 'token'],
                                                            'alts': {}}, 'explanations': 'new_label'},
                
                'greet': {'entities': {'must': [], 'alts': {}}},
                'goodbye': {'entities': {'must': [], 'alts': {}}},
                'affirm': {'entities': {'must': [], 'alts': {}}},
                'deny': {'entities': {'must': [], 'alts': {}}},
                'nlu_fallback': {'entities': {'must': [], 'alts': {}}},
                'chitchat_general': {'entities': {'must': [], 'alts': {}}},
                'help': {'entities': {'must': [], 'alts': {}}},
                'human_handoff': {'entities': {'must': [], 'alts': {}}},
                    }
# not in use
exp_mapping = {'lime': {'type': 'local',
                        'format': ['tabular_num_cat','tabular_mixed_cat'],
                        'presentaion': ['text', 'plot']}}

save_as_json(dataset_mapping, 'datasets')
save_as_json(model_mapping, 'models')
save_as_json(intent_mapping, 'intents')
save_as_json(profile_mapping, 'profiles')
save_as_json(exp_intents, 'exp_intents')

